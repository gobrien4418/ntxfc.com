//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace FlyingClub.Data.Model
{
    public partial class squawk
    {
        #region Primitive Properties
    
        public virtual long Id
        {
            get;
            set;
        }
    
        public virtual System.DateTime PostedOn
        {
            get;
            set;
        }
    
        public virtual long AircraftId
        {
            get { return _aircraftId; }
            set
            {
                if (_aircraftId != value)
                {
                    if (aircraft != null && aircraft.Id != value)
                    {
                        aircraft = null;
                    }
                    _aircraftId = value;
                }
            }
        }
        private long _aircraftId;
    
        public virtual long PosterId
        {
            get { return _posterId; }
            set
            {
                if (_posterId != value)
                {
                    if (member != null && member.Id != value)
                    {
                        member = null;
                    }
                    _posterId = value;
                }
            }
        }
        private long _posterId;
    
        public virtual string Description
        {
            get;
            set;
        }
    
        public virtual string Response
        {
            get;
            set;
        }
    
        public virtual Nullable<int> RespondedBy
        {
            get;
            set;
        }
    
        public virtual Nullable<System.DateTime> RespondedOn
        {
            get;
            set;
        }
    
        public virtual string Status
        {
            get;
            set;
        }

        #endregion
        #region Navigation Properties
    
        public virtual aircraft aircraft
        {
            get { return _aircraft; }
            set
            {
                if (!ReferenceEquals(_aircraft, value))
                {
                    var previousValue = _aircraft;
                    _aircraft = value;
                    Fixupaircraft(previousValue);
                }
            }
        }
        private aircraft _aircraft;
    
        public virtual member member
        {
            get { return _member; }
            set
            {
                if (!ReferenceEquals(_member, value))
                {
                    var previousValue = _member;
                    _member = value;
                    Fixupmember(previousValue);
                }
            }
        }
        private member _member;
    
        public virtual ICollection<squawkcomment> squawkcomments
        {
            get
            {
                if (_squawkcomments == null)
                {
                    var newCollection = new FixupCollection<squawkcomment>();
                    newCollection.CollectionChanged += Fixupsquawkcomments;
                    _squawkcomments = newCollection;
                }
                return _squawkcomments;
            }
            set
            {
                if (!ReferenceEquals(_squawkcomments, value))
                {
                    var previousValue = _squawkcomments as FixupCollection<squawkcomment>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= Fixupsquawkcomments;
                    }
                    _squawkcomments = value;
                    var newValue = value as FixupCollection<squawkcomment>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += Fixupsquawkcomments;
                    }
                }
            }
        }
        private ICollection<squawkcomment> _squawkcomments;

        #endregion
        #region Association Fixup
    
        private void Fixupaircraft(aircraft previousValue)
        {
            if (previousValue != null && previousValue.squawks.Contains(this))
            {
                previousValue.squawks.Remove(this);
            }
    
            if (aircraft != null)
            {
                if (!aircraft.squawks.Contains(this))
                {
                    aircraft.squawks.Add(this);
                }
                if (AircraftId != aircraft.Id)
                {
                    AircraftId = aircraft.Id;
                }
            }
        }
    
        private void Fixupmember(member previousValue)
        {
            if (previousValue != null && previousValue.squawks.Contains(this))
            {
                previousValue.squawks.Remove(this);
            }
    
            if (member != null)
            {
                if (!member.squawks.Contains(this))
                {
                    member.squawks.Add(this);
                }
                if (PosterId != member.Id)
                {
                    PosterId = member.Id;
                }
            }
        }
    
        private void Fixupsquawkcomments(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (squawkcomment item in e.NewItems)
                {
                    item.squawk = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (squawkcomment item in e.OldItems)
                {
                    if (ReferenceEquals(item.squawk, this))
                    {
                        item.squawk = null;
                    }
                }
            }
        }

        #endregion
    }
}
