//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace FlyingClub.Data.Model
{
    public partial class member
    {
        #region Primitive Properties
    
        public virtual long Id
        {
            get;
            set;
        }
    
        public virtual long LoginId
        {
            get { return _loginId; }
            set
            {
                if (_loginId != value)
                {
                    if (login != null && login.Id != value)
                    {
                        login = null;
                    }
                    _loginId = value;
                }
            }
        }
        private long _loginId;
    
        public virtual string Status
        {
            get;
            set;
        }
    
        public virtual string FirstName
        {
            get;
            set;
        }
    
        public virtual string LastName
        {
            get;
            set;
        }
    
        public virtual string PrimaryEmail
        {
            get;
            set;
        }
    
        public virtual string SecondaryEmail
        {
            get;
            set;
        }
    
        public virtual string Phone
        {
            get;
            set;
        }
    
        public virtual string AltPhone
        {
            get;
            set;
        }
    
        public virtual string AddressLine_1
        {
            get;
            set;
        }
    
        public virtual string AddressLine_2
        {
            get;
            set;
        }
    
        public virtual string City
        {
            get;
            set;
        }
    
        public virtual string Zip
        {
            get;
            set;
        }
    
        public virtual Nullable<System.DateTime> Member_since
        {
            get;
            set;
        }
    
        public virtual Nullable<System.DateTime> LastMedical
        {
            get;
            set;
        }
    
        public virtual Nullable<int> TotalHours
        {
            get;
            set;
        }
    
        public virtual Nullable<int> RetractHours
        {
            get;
            set;
        }
    
        public virtual string EmergencyName
        {
            get;
            set;
        }
    
        public virtual string EmergencyPhone
        {
            get;
            set;
        }

        #endregion
        #region Navigation Properties
    
        public virtual login login
        {
            get { return _login; }
            set
            {
                if (!ReferenceEquals(_login, value))
                {
                    var previousValue = _login;
                    _login = value;
                    Fixuplogin(previousValue);
                }
            }
        }
        private login _login;
    
        public virtual ICollection<membercheckout> membercheckouts
        {
            get
            {
                if (_membercheckouts == null)
                {
                    var newCollection = new FixupCollection<membercheckout>();
                    newCollection.CollectionChanged += Fixupmembercheckouts;
                    _membercheckouts = newCollection;
                }
                return _membercheckouts;
            }
            set
            {
                if (!ReferenceEquals(_membercheckouts, value))
                {
                    var previousValue = _membercheckouts as FixupCollection<membercheckout>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= Fixupmembercheckouts;
                    }
                    _membercheckouts = value;
                    var newValue = value as FixupCollection<membercheckout>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += Fixupmembercheckouts;
                    }
                }
            }
        }
        private ICollection<membercheckout> _membercheckouts;
    
        public virtual ICollection<reservation> reservations
        {
            get
            {
                if (_reservations == null)
                {
                    var newCollection = new FixupCollection<reservation>();
                    newCollection.CollectionChanged += Fixupreservations;
                    _reservations = newCollection;
                }
                return _reservations;
            }
            set
            {
                if (!ReferenceEquals(_reservations, value))
                {
                    var previousValue = _reservations as FixupCollection<reservation>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= Fixupreservations;
                    }
                    _reservations = value;
                    var newValue = value as FixupCollection<reservation>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += Fixupreservations;
                    }
                }
            }
        }
        private ICollection<reservation> _reservations;
    
        public virtual ICollection<squawkcomment> squawkcomments
        {
            get
            {
                if (_squawkcomments == null)
                {
                    var newCollection = new FixupCollection<squawkcomment>();
                    newCollection.CollectionChanged += Fixupsquawkcomments;
                    _squawkcomments = newCollection;
                }
                return _squawkcomments;
            }
            set
            {
                if (!ReferenceEquals(_squawkcomments, value))
                {
                    var previousValue = _squawkcomments as FixupCollection<squawkcomment>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= Fixupsquawkcomments;
                    }
                    _squawkcomments = value;
                    var newValue = value as FixupCollection<squawkcomment>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += Fixupsquawkcomments;
                    }
                }
            }
        }
        private ICollection<squawkcomment> _squawkcomments;
    
        public virtual ICollection<squawk> squawks
        {
            get
            {
                if (_squawks == null)
                {
                    var newCollection = new FixupCollection<squawk>();
                    newCollection.CollectionChanged += Fixupsquawks;
                    _squawks = newCollection;
                }
                return _squawks;
            }
            set
            {
                if (!ReferenceEquals(_squawks, value))
                {
                    var previousValue = _squawks as FixupCollection<squawk>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= Fixupsquawks;
                    }
                    _squawks = value;
                    var newValue = value as FixupCollection<squawk>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += Fixupsquawks;
                    }
                }
            }
        }
        private ICollection<squawk> _squawks;
    
        public virtual ICollection<aircraft> aircraft
        {
            get
            {
                if (_aircraft == null)
                {
                    var newCollection = new FixupCollection<aircraft>();
                    newCollection.CollectionChanged += Fixupaircraft;
                    _aircraft = newCollection;
                }
                return _aircraft;
            }
            set
            {
                if (!ReferenceEquals(_aircraft, value))
                {
                    var previousValue = _aircraft as FixupCollection<aircraft>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= Fixupaircraft;
                    }
                    _aircraft = value;
                    var newValue = value as FixupCollection<aircraft>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += Fixupaircraft;
                    }
                }
            }
        }
        private ICollection<aircraft> _aircraft;
    
        public virtual ICollection<member> member1
        {
            get
            {
                if (_member1 == null)
                {
                    var newCollection = new FixupCollection<member>();
                    newCollection.CollectionChanged += Fixupmember1;
                    _member1 = newCollection;
                }
                return _member1;
            }
            set
            {
                if (!ReferenceEquals(_member1, value))
                {
                    var previousValue = _member1 as FixupCollection<member>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= Fixupmember1;
                    }
                    _member1 = value;
                    var newValue = value as FixupCollection<member>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += Fixupmember1;
                    }
                }
            }
        }
        private ICollection<member> _member1;
    
        public virtual ICollection<member> members
        {
            get
            {
                if (_members == null)
                {
                    var newCollection = new FixupCollection<member>();
                    newCollection.CollectionChanged += Fixupmembers;
                    _members = newCollection;
                }
                return _members;
            }
            set
            {
                if (!ReferenceEquals(_members, value))
                {
                    var previousValue = _members as FixupCollection<member>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= Fixupmembers;
                    }
                    _members = value;
                    var newValue = value as FixupCollection<member>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += Fixupmembers;
                    }
                }
            }
        }
        private ICollection<member> _members;
    
        public virtual ICollection<aircraft> aircraft1
        {
            get
            {
                if (_aircraft1 == null)
                {
                    var newCollection = new FixupCollection<aircraft>();
                    newCollection.CollectionChanged += Fixupaircraft1;
                    _aircraft1 = newCollection;
                }
                return _aircraft1;
            }
            set
            {
                if (!ReferenceEquals(_aircraft1, value))
                {
                    var previousValue = _aircraft1 as FixupCollection<aircraft>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= Fixupaircraft1;
                    }
                    _aircraft1 = value;
                    var newValue = value as FixupCollection<aircraft>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += Fixupaircraft1;
                    }
                }
            }
        }
        private ICollection<aircraft> _aircraft1;
    
        public virtual ICollection<role> roles
        {
            get
            {
                if (_roles == null)
                {
                    var newCollection = new FixupCollection<role>();
                    newCollection.CollectionChanged += Fixuproles;
                    _roles = newCollection;
                }
                return _roles;
            }
            set
            {
                if (!ReferenceEquals(_roles, value))
                {
                    var previousValue = _roles as FixupCollection<role>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= Fixuproles;
                    }
                    _roles = value;
                    var newValue = value as FixupCollection<role>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += Fixuproles;
                    }
                }
            }
        }
        private ICollection<role> _roles;

        #endregion
        #region Association Fixup
    
        private void Fixuplogin(login previousValue)
        {
            if (previousValue != null && previousValue.members.Contains(this))
            {
                previousValue.members.Remove(this);
            }
    
            if (login != null)
            {
                if (!login.members.Contains(this))
                {
                    login.members.Add(this);
                }
                if (LoginId != login.Id)
                {
                    LoginId = login.Id;
                }
            }
        }
    
        private void Fixupmembercheckouts(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (membercheckout item in e.NewItems)
                {
                    item.member = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (membercheckout item in e.OldItems)
                {
                    if (ReferenceEquals(item.member, this))
                    {
                        item.member = null;
                    }
                }
            }
        }
    
        private void Fixupreservations(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (reservation item in e.NewItems)
                {
                    item.member = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (reservation item in e.OldItems)
                {
                    if (ReferenceEquals(item.member, this))
                    {
                        item.member = null;
                    }
                }
            }
        }
    
        private void Fixupsquawkcomments(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (squawkcomment item in e.NewItems)
                {
                    item.member = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (squawkcomment item in e.OldItems)
                {
                    if (ReferenceEquals(item.member, this))
                    {
                        item.member = null;
                    }
                }
            }
        }
    
        private void Fixupsquawks(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (squawk item in e.NewItems)
                {
                    item.member = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (squawk item in e.OldItems)
                {
                    if (ReferenceEquals(item.member, this))
                    {
                        item.member = null;
                    }
                }
            }
        }
    
        private void Fixupaircraft(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (aircraft item in e.NewItems)
                {
                    if (!item.members.Contains(this))
                    {
                        item.members.Add(this);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (aircraft item in e.OldItems)
                {
                    if (item.members.Contains(this))
                    {
                        item.members.Remove(this);
                    }
                }
            }
        }
    
        private void Fixupmember1(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (member item in e.NewItems)
                {
                    if (!item.members.Contains(this))
                    {
                        item.members.Add(this);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (member item in e.OldItems)
                {
                    if (item.members.Contains(this))
                    {
                        item.members.Remove(this);
                    }
                }
            }
        }
    
        private void Fixupmembers(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (member item in e.NewItems)
                {
                    if (!item.member1.Contains(this))
                    {
                        item.member1.Add(this);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (member item in e.OldItems)
                {
                    if (item.member1.Contains(this))
                    {
                        item.member1.Remove(this);
                    }
                }
            }
        }
    
        private void Fixupaircraft1(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (aircraft item in e.NewItems)
                {
                    if (!item.members1.Contains(this))
                    {
                        item.members1.Add(this);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (aircraft item in e.OldItems)
                {
                    if (item.members1.Contains(this))
                    {
                        item.members1.Remove(this);
                    }
                }
            }
        }
    
        private void Fixuproles(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (role item in e.NewItems)
                {
                    if (!item.members.Contains(this))
                    {
                        item.members.Add(this);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (role item in e.OldItems)
                {
                    if (item.members.Contains(this))
                    {
                        item.members.Remove(this);
                    }
                }
            }
        }

        #endregion
    }
}
