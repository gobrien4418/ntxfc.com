//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace FlyingClub.Data.Model
{
    public partial class aircraft
    {
        #region Primitive Properties
    
        public virtual long Id
        {
            get;
            set;
        }
    
        public virtual string RegistrationNumber
        {
            get;
            set;
        }
    
        public virtual string Model
        {
            get;
            set;
        }
    
        public virtual string TypeDesignation
        {
            get;
            set;
        }
    
        public virtual string Category
        {
            get;
            set;
        }
    
        public virtual string AircraftClass
        {
            get;
            set;
        }
    
        public virtual Nullable<int> MaxGrossWeight
        {
            get;
            set;
        }
    
        public virtual Nullable<short> FuelCapacity
        {
            get;
            set;
        }
    
        public virtual Nullable<int> UsefulLoad
        {
            get;
            set;
        }
    
        public virtual Nullable<short> CruiseSpeed
        {
            get;
            set;
        }
    
        public virtual Nullable<short> MaxRange
        {
            get;
            set;
        }
    
        public virtual string Description
        {
            get;
            set;
        }
    
        public virtual string EquipmentList
        {
            get;
            set;
        }
    
        public virtual Nullable<bool> IrCertified
        {
            get;
            set;
        }
    
        public virtual string CheckoutRequirements
        {
            get;
            set;
        }
    
        public virtual Nullable<short> HourlyRate
        {
            get;
            set;
        }

        #endregion
        #region Navigation Properties
    
        public virtual ICollection<aircraftimage> aircraftimages
        {
            get
            {
                if (_aircraftimages == null)
                {
                    var newCollection = new FixupCollection<aircraftimage>();
                    newCollection.CollectionChanged += Fixupaircraftimages;
                    _aircraftimages = newCollection;
                }
                return _aircraftimages;
            }
            set
            {
                if (!ReferenceEquals(_aircraftimages, value))
                {
                    var previousValue = _aircraftimages as FixupCollection<aircraftimage>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= Fixupaircraftimages;
                    }
                    _aircraftimages = value;
                    var newValue = value as FixupCollection<aircraftimage>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += Fixupaircraftimages;
                    }
                }
            }
        }
        private ICollection<aircraftimage> _aircraftimages;
    
        public virtual ICollection<membercheckout> membercheckouts
        {
            get
            {
                if (_membercheckouts == null)
                {
                    var newCollection = new FixupCollection<membercheckout>();
                    newCollection.CollectionChanged += Fixupmembercheckouts;
                    _membercheckouts = newCollection;
                }
                return _membercheckouts;
            }
            set
            {
                if (!ReferenceEquals(_membercheckouts, value))
                {
                    var previousValue = _membercheckouts as FixupCollection<membercheckout>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= Fixupmembercheckouts;
                    }
                    _membercheckouts = value;
                    var newValue = value as FixupCollection<membercheckout>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += Fixupmembercheckouts;
                    }
                }
            }
        }
        private ICollection<membercheckout> _membercheckouts;
    
        public virtual ICollection<reservation> reservations
        {
            get
            {
                if (_reservations == null)
                {
                    var newCollection = new FixupCollection<reservation>();
                    newCollection.CollectionChanged += Fixupreservations;
                    _reservations = newCollection;
                }
                return _reservations;
            }
            set
            {
                if (!ReferenceEquals(_reservations, value))
                {
                    var previousValue = _reservations as FixupCollection<reservation>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= Fixupreservations;
                    }
                    _reservations = value;
                    var newValue = value as FixupCollection<reservation>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += Fixupreservations;
                    }
                }
            }
        }
        private ICollection<reservation> _reservations;
    
        public virtual ICollection<squawk> squawks
        {
            get
            {
                if (_squawks == null)
                {
                    var newCollection = new FixupCollection<squawk>();
                    newCollection.CollectionChanged += Fixupsquawks;
                    _squawks = newCollection;
                }
                return _squawks;
            }
            set
            {
                if (!ReferenceEquals(_squawks, value))
                {
                    var previousValue = _squawks as FixupCollection<squawk>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= Fixupsquawks;
                    }
                    _squawks = value;
                    var newValue = value as FixupCollection<squawk>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += Fixupsquawks;
                    }
                }
            }
        }
        private ICollection<squawk> _squawks;
    
        public virtual ICollection<member> members
        {
            get
            {
                if (_members == null)
                {
                    var newCollection = new FixupCollection<member>();
                    newCollection.CollectionChanged += Fixupmembers;
                    _members = newCollection;
                }
                return _members;
            }
            set
            {
                if (!ReferenceEquals(_members, value))
                {
                    var previousValue = _members as FixupCollection<member>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= Fixupmembers;
                    }
                    _members = value;
                    var newValue = value as FixupCollection<member>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += Fixupmembers;
                    }
                }
            }
        }
        private ICollection<member> _members;
    
        public virtual ICollection<member> members1
        {
            get
            {
                if (_members1 == null)
                {
                    var newCollection = new FixupCollection<member>();
                    newCollection.CollectionChanged += Fixupmembers1;
                    _members1 = newCollection;
                }
                return _members1;
            }
            set
            {
                if (!ReferenceEquals(_members1, value))
                {
                    var previousValue = _members1 as FixupCollection<member>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= Fixupmembers1;
                    }
                    _members1 = value;
                    var newValue = value as FixupCollection<member>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += Fixupmembers1;
                    }
                }
            }
        }
        private ICollection<member> _members1;

        #endregion
        #region Association Fixup
    
        private void Fixupaircraftimages(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (aircraftimage item in e.NewItems)
                {
                    item.aircraft = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (aircraftimage item in e.OldItems)
                {
                    if (ReferenceEquals(item.aircraft, this))
                    {
                        item.aircraft = null;
                    }
                }
            }
        }
    
        private void Fixupmembercheckouts(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (membercheckout item in e.NewItems)
                {
                    item.aircraft = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (membercheckout item in e.OldItems)
                {
                    if (ReferenceEquals(item.aircraft, this))
                    {
                        item.aircraft = null;
                    }
                }
            }
        }
    
        private void Fixupreservations(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (reservation item in e.NewItems)
                {
                    item.aircraft = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (reservation item in e.OldItems)
                {
                    if (ReferenceEquals(item.aircraft, this))
                    {
                        item.aircraft = null;
                    }
                }
            }
        }
    
        private void Fixupsquawks(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (squawk item in e.NewItems)
                {
                    item.aircraft = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (squawk item in e.OldItems)
                {
                    if (ReferenceEquals(item.aircraft, this))
                    {
                        item.aircraft = null;
                    }
                }
            }
        }
    
        private void Fixupmembers(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (member item in e.NewItems)
                {
                    if (!item.aircraft.Contains(this))
                    {
                        item.aircraft.Add(this);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (member item in e.OldItems)
                {
                    if (item.aircraft.Contains(this))
                    {
                        item.aircraft.Remove(this);
                    }
                }
            }
        }
    
        private void Fixupmembers1(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (member item in e.NewItems)
                {
                    if (!item.aircraft1.Contains(this))
                    {
                        item.aircraft1.Add(this);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (member item in e.OldItems)
                {
                    if (item.aircraft1.Contains(this))
                    {
                        item.aircraft1.Remove(this);
                    }
                }
            }
        }

        #endregion
    }
}
